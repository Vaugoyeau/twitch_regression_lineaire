---
title: "Apprendre à réaliser une régression linéaire"
author: "Marie Vaugoyeau"
date: "2024/12/17"
date-format: "D MMMM YYYY"
format: 
  pdf:
    toc: true
    number-sections: true
    papersize: letter
execute: 
  warning: false
---

# import des packages  
```{r}
library(tidyverse)
```

# Définition de la `régression linéaire`  

**Objectif** : Trouver une équation de type linéaire qui permet d'expliquer une **variable réponse quantitative** par **une ou plusieurs variable(s) explicative(s)**.   

:::callout-note
## Différence entre régression linéaire et modèle linéaire  

Il n'y en a pas !  
Certaines personnes parlent de **modèle de régression linéaire**.  
:::

L'équation est de la forme : $$ Y = aX + b $$ 
Avec `a : la pente` et `b : l'ordonnée à l'origine ou intecept`  
  
![](img/reg_lin.png)  
  
:::callout-warning
## Attention  

La régression de `Y` en fonction de `X` n'est pas la même que la régression de `X` en fonction de `Y`.  
:::  

![](img/sens_reg.png)  
  
# Etude des résidus  
Pour ajuste la droite de régression, la méthode utilisée se base sur les **résidus** : **la méthode des moindres carrées**.  
L'idée est d'avoir la somme la plus petite possible.    
  
  
::: callout-note  
## Les résidus 

Un résidu est la **différence** entre la **valeur observée** et la **valeur prédite par l'équation linéaire**.  
:::
  
  
![](img/residu.png)  
  
Les résidus doivent suivre une loi normale, vérifiable grâce à un `graphique quantile-quantile` (`QQplot`) ou le test de `Shapiro-Wilk`.  
  
# Les points extrêmes  
Il y a deux sortes d'extrêmes :  
  
- **Extrême sur Y** : ordonnée très différente des autres points d’abscisse proche -> **Point non consistant**  
```{r}

```

- **Extrême sur X** : abscisse nettement plus petite ou plus grande que celle des autres points -> **Phénomène de levier**  
```{r}

```
  
::: callout-warning  
## Point influent  
  
Dans les deux cas, un point est **influant** lorsque la régression pratiquée avec ou sans ce point conduit à des résultats très différents.  
:::
  
```{r}

```
  
# Les données  
Les données utilisées sont celles du jeu de données [`iris`](https://www.rdocumentation.org/packages/datasets/versions/3.6.2/topics/iris). Les longueurs et largeurs de sépales et pétales ont été mesurées sur 50 iris de 3 espèces, plus d'information sur la page d'aide `help(iris)`.  

```{r}

```
  
# Réalisation d'une régression linéaire  
## 1^ère^ étape : Réalisation d'un nuage de points   
  
La visualisation des données est une étape indispensable afin de **vérifier les données** et de **contrôler la linéarité** des données.  

```{r}

```
  
::: callout-warning
## Attention  
  
Il ne faut pas réaliser de régression linéaire si graphiquement on ne distingue pas de relation linéaire entre les données.  
:::  
  
```{r}

```

## 2^ème^ étape : Vérifier les limites d'utilisation de la régression     
Les données doivent être indépendantes et suivre (ou être approximées par) des lois normales.  
  
```{r}

```

```{r}

```
  
:::callout-note  
La régression linéaire est assez résistante à l'absence de normalité et il est possible de la faire ici en prenant en compte [**la loi des grands nombres**](https://fr.wikipedia.org/wiki/Loi_des_grands_nombres).  
:::
  
## 3^ème^ étape : Création du modèle linéaire  
Plusieurs packages ont des fonctions qui permettent de réaliser un modèle linéaire.  
Ici je vais rester sur la fonction `lm()` du package `{stats}` automatiquement chargé dans l'environnement.  
Cette fonction prend comme premier argument la `formula`, c'est-à-dire la formule de type `y ~ x` et en deuxième argument `data`, le jeu de données utilisé.  
```{r}

```

Pour accéder aux coefficients, il y a plusieurs solutions :  

- Rappeler le nom du modèle  
- Utiliser la fonction `summary()` du package `{base}`  
- Applique la fonction `anova()` du package `{stats}`  
- Prendre la fonction `Anova()` du package `{car}`  

```{r}

```

Pour voir la différence entre les deux `anova` il faut ajouter des variables.  
  
La sortie `summary()` nous dit que le modèle est significatif (`p-value: < 2.2e-16`) mais il faut vérifier qu'il est valide.  
  
## 4^ème^ étape : Validation du modèle  
Le modèle est accepté si les **résidus** suivent une **loi normale**.  
  
```{r}

```
  
Il est aussi bien de visualiser le modèle grâce à la fonction `plot()`.  

```{r}

```

  
## 5^ème^ étape : Réalisation d'un graphique résumé  
Le nuage de points avec une droite est la meilleur représentation.  
  
```{r}

```
  
  




